    <style>
#conf > * { width: 100%; }
</style>

    <h1 id='nav'>
  <button class="material-icons show" id="show-conf" value="conf">settings</button>
  <button class="material-icons show" id="show-feed" value="feed">comment_bank</button>
  <button class="material-icons show" id="show-qr" value="qr">share</button>
</h1>
    <div class="ui" id="conf">
    <input type="text" id="name" placeholder="your nickname..." />
  <select id="mode" name="mode">
    <option value="buy">is buying</option>
    <option value="sell">is selling</option>
  </select>
    <input type="text" id="pitch" placeholder="item..." />
    <input type='text' id='image' placeholder='image link...' />
  <textarea id="desc" placeholder="description"></textarea>
</div>
<div class="ui" id="qr">
  <button type="button" class="qrcode-reader material-icons" id="scanner"
	  data-qrr-target="#id"
	  data-qrr-audio-feedback="false"
data-qrr-qrcode-regexp="^https?:\/\/" style="">qr_code_scanner</button>
    <input id="id" type="text" placeholder="contact id..." style="width: 45%;">
  <button class="material-icons" id='add'>add</button>
</div>
<div class="ui" id="feed">
    <div id="messages">Welcome!</div>
    <div id="friends">
      <div class="friend" style="position: relative; text-align: center; border-radius: 10px; padding: 1%;">
	<img src="/logo.png" style="width: 100%;">
	<span style="position: absolute; top: 0; left: 0; background-color: white; background-color: white; border: thin solid orangered; border-radius: 10px;">my sample item</span> 
	<button class="material-icons call" value='1234567890' style="position: absolute; top: 0; right: 0; font-size: initial;">call</button>
	<p style="position: absolute; bottom: 0; left: 50%; transform: translate(-50%, -50%); background-color: white; border: thin solid orangered; border-radius: 10px;">my sample desc</p>
      </div>
    </div>
</div>
<div class="ui" id="call">
  <button class="material-icons show" value="feed">comment_blank</button>
  <video class="remote-video" autoplay></video>
  
</div>
<script>
    $(function() {
	$('.ui').hide();
	var f = [];
	var m = [];
	load();
	$.qrCodeReader.jsQRpath = "https://cdn.staticaly.com/gh/mauntrelio/qrcode-reader/master/dist/js/jsQR/jsQR.min.js";
	$.qrCodeReader.beepPath = "https://cdn.staticaly.com/gh/mauntrelio/qrcode-reader/master/dist/audio/beep.mp3";
	
	// bind all elements of a given class
	$("#scanner").qrCodeReader();
	// client-side js, loaded by index.html
	// run by the browser each time the page is loaded
	
	let Peer = window.Peer;
	
	let messagesEl = document.getElementById('messages');
	let videoEl = document.querySelector('.remote-video');
	
	let logMessage = (message) => {
	    m.push(message);
	    update();
	};
	
	let renderVideo = (stream) => {
	    videoEl.srcObject = stream;
	};
	
	// Register with the peer server
	let peer = new Peer("<%= @here.attr['id'] %>");
	peer.on('open', (id) => {
	    f.push(id);
	    setInterval(update(), 5000);
	});
	peer.on('error', (error) => {
	    console.error(error);
	});
	
	// Handle incoming data connection
	peer.on('connection', (conn) => {
	    logMessage('incoming peer connection!');
	    conn.on('data', (data) => {
		logMessage(`received: ${data}`);
	    });
	    conn.on('open', () => {
		conn.send('hello!');
	    });
	});
	
	// Handle incoming voice/video connection
	peer.on('call', (call) => {
	    navigator.mediaDevices.getUserMedia({video: true, audio: true})
		.then((stream) => {
		    display("call");
		    call.answer(stream); // Answer the call with an A/V stream.
		    call.on('stream', renderVideo);
		})
		.catch((err) => {
		    display("feed");
		    console.error('Failed to get local stream', err);
		});
	});
	
	function save() { localStorage.setItem("f", JSON.stringify(f)); }
	function load() { f = JSON.parse(localStorage.getItem("f")); }
	function update() {
	    if ( $('#id').val() == '' ) {
		var d = {};
		d.name = $("#name").val();
		d.pitch = $("#pitch").val();
		d.image = $("#image").val();
		d.desc = $("#desc").val();
		d.contacts = JSON.stringify(f);
		d.messages = JSON.stringify(m);
		d.token = '<%= params[:token] %>';
		console.log("UPDATE", d);
		$.post('/', d, function (data) {
		    $("#friends").html(data.friends);
		    $("#messages").html(data.messages);
		    $("#name").val(data.name);
		    $("#pitch").val(data.pitch);
		    $("#image").val(data.image);
		    $("#desc").val(data.desc);
		    f = JSON.parse(data.contacts);
		    save();
		    console.log("update", data);
		});
		m = [];
	    }
	}
	function display(el) {
	    $(".ui").hide();
	    $("#nav").hide();
	    $(".show").css('background-color', 'initial');
	    $("#show-" + el).css("background-color", "orangered");
	    $("#" + el).show();
	    if ( el != 'auth' ) { $("#nav").show(); }
	}
	
	function connect(to) {
	    logMessage(`connecting: ${to}`);
	    let conn = peer.connect(to);
	    conn.on('data', (data) => {
		logMessage(`received: ${data}`);
	    });
	    conn.on('open', () => {
		logMessage(`connected: ${to}`);
	    });
	    
	    navigator.mediaDevices.getUserMedia({video: true, audio: true})
		.then((stream) => {
		    display("call");
		    let call = peer.call(youId, stream);
		    call.on('stream', renderVideo);
		})
		.catch((err) => {
		    logMessage('Failed to get local stream', err);
		});
	};
	
	$(document).on('submit', "form", function(ev) { ev.preventDefault(); });
	$(document).on('click', '.call', function() {
	    connect($(this).val());
	});
	$(document).on('click', '.show', function() {
            update();
	    display($(this).val());
	});
	$(document).on('click', '#add', function() {
	    f << ($("#id").val());
	    $("#show-feed").click();
	});
    });
</script>
    
